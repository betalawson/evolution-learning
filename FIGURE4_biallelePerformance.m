function FIGURE4_biallelePerformance()
%
% This function plots a selection of the total set of results for the
% biallele selection problem, as have been generated by the function
% allBialleleResults.m
%
% The plotted results are:
%
%   * The trajectory error (including forecasting) obtained for a single
%     choice of library, and different population sizes
%
%   * The trajectory error (including forecasting) obtained for a set of
%     different fitness libraries for a set population size N
%
%   * The parameters identified for different population sizes
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Switch that specifies whether to visualise, or save, the figures
save_figs = true;

% Specify which populaiton level to plot (among those stored in the data)
pop_level = 2;

% Dataset name
data_prefix = 'DATA_BIALL_';
% Method names
data_methodnames = {'orders01','orders1','orders012','symm'};
% x-axis labels for the method plots
xtxts_methods = {'p \leq 1', 'p = 1', 'p \leq 2', 'Symm'};

% Load in the basic problem
load('problems_basic.mat','allele_basic');
problem = allele_basic;


%%% TRAJECTORY ERROR FOR DIFFERENT POPULATION SIZES

% Prepare filename
this_filename = [data_prefix, 'orders01.mat'];
% Load data
load(this_filename, 'simResults');
% Prepare x-axis labels for the population size plots
for n = 1:length(simResults.pop_sizes)
    xtxts_pop{n} = ['10^{',num2str(log10(simResults.pop_sizes(n))),'}'];
end

% Prepare figure information
title_txt = 'Trajectory RMSE ($p \leq 1$)';
fig_filename = 'FIG4a_biallele_RMSEpops';

% Plot the results
plotRMSEBoxplot( struct('l2_mat',simResults.predl2_mat,'l2_perfect',simResults.predl2_perfect), xtxts_pop, '$N$', title_txt, fig_filename, save_figs, true, false);

%%% TRAJECTORY ERROR FOR DIFFERENT METHODS

% Count provided number of methods
N_methods = length(data_methodnames);

% Load in the data for each method
for m = 1:N_methods
    
    % Prepare filename
    this_filename = [data_prefix, data_methodnames{m}, '.mat'];
    % Load data
    load(this_filename, 'simResults');
       
    % Use the first dataset to prepare storage and check population size
    if m == 1
        
        % Count number of replicates
        N_rep = size(simResults.obsl2_mat,3);
                
        % Prepare results storage
        predl2_mat = zeros(N_methods, 4, N_rep);
        
        % Note population size
        N_pop = simResults.pop_sizes(pop_level);
        
    end
    
    % Grab out the data for the requested population level and store
    predl2_mat(m, :, :) = simResults.predl2_mat(pop_level,:,:);
    
end

% Prepare figure information
title_txt = ['Trajectory RMSE (N = ',num2str(N_pop),')'];
fig_filename = 'FIG4b_biallele_RMSEmethods';

% Plot the error boxplots
plotRMSEBoxplot( struct('l2_mat', predl2_mat), xtxts_methods, 'Library', title_txt, fig_filename, save_figs);


%%% PARAMETER ESTIMATION WITH A KNOWN MODEL

% Prepare filename - symmetric
this_filename = [data_prefix, 'symm.mat'];
% Load data
load(this_filename, 'simResults');


% Get the true values of the parameters and add these to the results struct
A = problem.fitness(eye(2));
simResults.params_true = extractBialleleParams(A,1);

% Prepare figure information
title_txt = '';
fig_filename = 'FIG4c_biallele_';

% Plot the parameter fitting boxplots (one plot per parameter)
plotParamsBoxplot( simResults, xtxts_pop, '$N$', title_txt, fig_filename, save_figs);