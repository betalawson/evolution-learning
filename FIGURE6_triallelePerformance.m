function FIGURE6_triallelePerformance()
%
% This function plots a selection of the total set of results for the
% biallele selection problem, as have been generated by the function
% allBialleleResults.m
%
% The plotted results are:
%
%   * The trajectory error (including forecasting) obtained for a single
%     choice of library, and different population sizes
%
%   * The trajectory error (including forecasting) obtained for a set of
%     different fitness libraries for a set population size N
%
%   * The parameters identified for different population sizes
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Switch that specifies whether to visualise, or save, the figures
save_figs = true;

% Specify which population levels to pull out to plot
pop_levels = [2,4];

% Dataset name
data_prefix = 'DATA_TRIALL_';

% Load in the tri-allelic selection problems
load('problems_inheritance.mat','allele_standard', 'allele_transient', 'allele_persistence');
problems_list = {allele_standard, allele_transient, allele_persistence};
problems_filenames = {'std', 'tran', 'pers'};
problems_names = {'Standard', 'Transient', 'Persistence'};

% Count number of problems
N_problems = length(problems_list);


%%% TRAJECTORY ERROR FOR DIFFERENT POPULATION SIZES

% Loop across each problem in the problem list
for p = 1:N_problems
    
    % Prepare filename
    this_filename = [data_prefix, problems_filenames{p}, '_orders01.mat'];
    % Load data
    load(this_filename, 'simResults');
    % Prepare x-axis labels for the population size plots
    for n = 1:length(simResults.pop_sizes)
        xtxts_pop{n} = ['10^{',num2str(log10(simResults.pop_sizes(n))),'}'];
    end

    % Prepare figure information
    title_txt = problems_names{p};
    fig_filename = ['FIG6_triallele_RMSE_',problems_filenames{p}];

    % Plot the results, including legend for last plot
    if p == N_problems 
        plotRMSEBoxplot( struct('l2_mat',simResults.predl2_mat,'l2_perfect',simResults.predl2_perfect), xtxts_pop, '$N$', title_txt, fig_filename, save_figs, true, false);
    else
        plotRMSEBoxplot( struct('l2_mat',simResults.predl2_mat,'l2_perfect',simResults.predl2_perfect), xtxts_pop, '$N$', title_txt, fig_filename, save_figs, false, false);
    end
    
end


%%% PARAMETER ESTIMATION WITH A KNOWN MODEL

% Loop across each problem in the problem list
for p = 1:N_problems
    
    % Prepare filename
    this_filename = [data_prefix, problems_filenames{p}, '_symm.mat'];
    % Load data
    load(this_filename, 'simResults');
    
    % Get the true values of the parameters for this problem
    A = problems_list{p}.fitness(eye(3));
    % Add these to the results struct
    simResults.params_true = extractTrialleleParams(A,1);
     
    % Prepare figure information
    title_txt = problems_names{p};
    fig_filename = ['FIG6_triallele_params_',problems_filenames{p}];

    % Plot the type II parameter fitting boxplots (one plot per parameter)
    selection_type = 2;
    if p == N_problems   % Add legend on the last plot
        plotAllParamsBoxplot( simResults, pop_levels, selection_type, title_txt, fig_filename, save_figs, true, 'bottom_right');
    else
        plotAllParamsBoxplot( simResults, pop_levels, selection_type, title_txt, fig_filename, save_figs, false);
    end
    
end