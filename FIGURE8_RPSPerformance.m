function FIGURE8_RPSPerformance()
%
% This function plots a selection of the total set of results for the
% rock-paper-scissors selection problem, as have been generated by the 
% function allRPSResults.m
%
% The plotted results are:
%
%   * The trajectory error with increasing population size for the three
%     different problems
%
%   * The parameter estimates returned from the three different problems,
%     for two population sizes (type II only)
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Switch that specifies whether to visualise, or save, the figures
save_figs = true;

% Specify which population levels to pull out to plot
pop_levels = [2,4];

% Dataset name
data_prefix = 'DATA_RPS_';

% Load in the tri-allelic selection problems
load('problems_RPS.mat','RPS_balanced', 'RPS_attract', 'RPS_repel');
problems_list = {RPS_balanced, RPS_attract, RPS_repel};
problems_filenames = {'bal', 'atr', 'rep'};
problems_names = {'Balanced', 'Attracting', 'Repelling'};

% Count number of problems
N_problems = length(problems_list);


%%% TRAJECTORY ERROR FOR DIFFERENT POPULATION SIZES

% Loop across each problem in the problem list
for p = 1:N_problems
    
    % Prepare filename
    this_filename = [data_prefix, problems_filenames{p}, '_orders01.mat'];
    % Load data
    load(this_filename, 'simResults');
    % Prepare x-axis labels for the population size plots
    for n = 1:length(simResults.pop_sizes)
        xtxts_pop{n} = ['10^{',num2str(log10(simResults.pop_sizes(n))),'}'];
    end

    % Prepare figure information
    title_txt = problems_names{p};
    fig_filename = ['FIG8_RPS_RMSE_',problems_filenames{p}];

    % Plot the results, including legend for last plot
    if p == 1
        plotRMSEBoxplot( struct('l2_mat',simResults.predl2_mat,'l2_perfect',simResults.predl2_perfect), xtxts_pop, '$N$', title_txt, fig_filename, save_figs, true, false);
    else
        plotRMSEBoxplot( struct('l2_mat',simResults.predl2_mat,'l2_perfect',simResults.predl2_perfect), xtxts_pop, '$N$', title_txt, fig_filename, save_figs, false, false);
    end
    
end


%%% PARAMETER ESTIMATION WITH A KNOWN MODEL

% Loop across each problem in the problem list
for p = 1:N_problems
    
    % Prepare filename
    this_filename = [data_prefix, problems_filenames{p}, '_orders01.mat'];
    % Load data
    load(this_filename, 'simResults');
    
    % Get the true values of the parameters for this problem
    A = problems_list{p}.fitness(eye(3));
    % Add these to the results struct
    simResults.params_true = extractRPSParams(A,1);
     
    % Prepare figure information
    title_txt = problems_names{p};
    fig_filename = ['FIGS6_RPS_params_',problems_filenames{p}];

    % Plot the type II parameter fitting boxplots (one plot per parameter)
    selection_type = 2;
    if p == 1   % Add legend on the last plot
        plotAllParamsBoxplot( simResults, pop_levels, selection_type, title_txt, fig_filename, false, true, 'bottom_left');
    else
        plotAllParamsBoxplot( simResults, pop_levels, selection_type, title_txt, fig_filename, false, false);
    end
    
    % Adjust the figure size for these because there are more parameters
    set(gcf,'Units','Normalized');
    fig_pos = get(gcf,'Position');
    fig_pos(3) = 0.3604;
    fig_pos(4) = 0.4444;
    set(gcf,'Position',fig_pos);

    % Re-save the figures
    if save_figs
        saveas(gcf, [fig_filename,'.eps'], 'epsc');
        close(gcf);
    end
        
end